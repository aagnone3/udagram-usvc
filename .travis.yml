language: node_js
node_js:
  - 13

services:
  - docker

install:
  # install kubectl
  - echo "Installing stable version of kubectl"
  - curl -LO https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl
  - chmod 755 kubectl
  - sudo mv kubectl /usr/local/bin/
  # set up k8s config
  - echo "Setting up k8s config"
  - mkdir ~/.kube
  - cp udacity-c3-deployment/terraform/udagram-agnone-kubeconfig ~/.kube/config
  - kubectl config set clusters.udagram-agnone.certificate-authority-data "$K8S_CLUSTER_CERT"
  - kubectl config set users.kubernetes-admin.client-certificate-data "$K8S_ADMIN_CLIENT_CERT"
  - kubectl config set users.kubernetes-admin.client-key-data "$K8S_ADMIN_CLIENT_KEY"

before_script:
  - echo "no tests"

script:
  - docker --version
  - kubectl version
  # - cd udacity-c3-deployment/docker
  # - docker-compose -f docker-compose-build.yaml build --parallel

after_success:
  # push the built Docker images to their repositories
  - pushd udacity-c3-deployment/docker
  - echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
  - docker-compose -f docker-compose-build.yaml push
  - popd
  # deploy application to the running cluster
  - pushd udacity-c3-deployment/terraform
  - make deploy_services
  - popd